from k3 import k3
from hashes import hashes_bytes, single_hashes
from mapped_data import data

from hashlib import sha256

BLOCK_SIZE = 16

def block(n):
	return data[n * BLOCK_SIZE:(n + 1) * BLOCK_SIZE]

def set_block(n, m):
	data[n * BLOCK_SIZE:(n + 1) * BLOCK_SIZE] = m

def to_hex(n):
	return hex(n)[2:].rjust(2, '0')

def green(b): return '\033[32m' + b + '\033[0m'
def yellow(b): return '\033[93m' + b + '\033[0m'
def red(b): return '\033[31m' + b + '\033[0m'


known = {
	0x0b: 0x0e,
	0x06: 0x00,
	0x0d: 0x01,
	0xad: 0xda,
	0x06: 0x00,
	0x02: 0x09,
	0xe1: 0xf1,
	0x02: 0x09,
	0xe8: 0x10,
	0xca: 0xac,
	0xec: 0xe7,
	0xf1: 0x30,
	0x7f: 0xa4,
	0x0c: 0x04,
	0x7e: 0xdc,
	0x17: 0x60,
	0x7c: 0xf4,
	0xac: 0xff,
	0xc5: 0x4f,
	0xe9: 0x50,
	0x81: 0xf8,
	0x87: 0xf3,
	0x60: 0x40,
	0x6a: 0xc0,
	0xda: 0x58,
	0xf0: 0xa8,
	0xce: 0x80,
	0xcf: 0x11,
	0x78: 0x91,
	0xb0: 0xe4,
	0xab: 0x2d,
	0xdc: 0xdf,
	0x48: 0x54,
	0x7a: 0x16,
	0xc8: 0x62,
	0x86: 0xfb,
	0x0e: 0x08,
	0x92: 0x18,
	0x25: 0xb3,
	0x03: 0x0c,
	0x18: 0x41,
	0xa3: 0xbc,
	0x00: 0xb,
	0x6b: 0xec,
	0xa4: 0x14,
	0x05: 0x0d,
	0xee: 0x93,
	0xde: 0x1a,
	0xd3: 0x61,
	0x19: 0x43,
	0xc3: 0x94,
	0x01: 0x0f,
	0xe4: 0xee,
	0xd9: 0xfa,
	0x09: 0x03,
	0xbb: 0xbd,
	0xd9: 0xfa,
	0x09: 0x03,
	0xbb: 0xbd,
    0x80: 0x39,
	0x6f: 0x83,
	0x50: 0x9b,
    0xdd: 0xf0,
	0x28: 0x67,
    0xf3: 0x68,
	0xd6: 0xe8,
	0x32: 0x84,
	0x20: 0x19,
	0xc1: 0x13,
	0x30: 0x33,
	0xd5: 0xa0,
	0xf6: 0xe1,
	0x71: 0xe3,
	0x0f: 0x06,
	0x68: 0x81,
	0x84: 0xb4,
	0x76: 0xa7,
	0xa8: 0x3d,
	0xaf: 0x5b,
	0xba: 0xca,
	0x07: 0x07,
	0xa0: 0x12,
	0x04: 0x0a,
	0x1a: 0x21,
	0x5f: 0x38,
	0xef: 0xf2,
	0x6e: 0x66,
	0x54: 0x48,
	0xc7: 0xb0,
	0x55: 0x20,
	0x83: 0x78,
	0xb7: 0xa1,
	0x95: 0x24,
	0xa6: 0x57,
	0xaa: 0x37,
	0xfd: 0x55,
	0x41: 0xf5,
	0x52: 0xa2,
	0x63: 0x17,
	0x8c: 0x59,
	0x39: 0x4a,
	0x40: 0xa9,
	0x4d: 0x5a,
	0xcb: 0xc3,
	0x8d: 0x70,
	0x9f: 0x8a,
	0xb4: 0x9d,
	0xe2: 0xf9,
	0x0a: 0x05,
	0x16: 0x4c,
	0xae: 0xd8,
	0x3c: 0xe9,
	0x4a: 0xc1,
	0x1e: 0xdd,
	0x61: 0x34,
	0x9d: 0xd9,
	0xe6: 0x63,
	0xd8: 0x82,
	0x4e: 0xed,
	0x08: 0x02,
	0x70: 0x92,
	0xe5: 0x49,
}

# print(known)
# print(len(known))

selected = 0




blocks = [block(i) for i in range(110)]
res = []
for index, blk in enumerate(blocks):
	brute_counter = set()
	tmp = []
	print(str(index).rjust(3, ' '), end='   ')

	for i, b in enumerate(blk):
		if i & 1 or (index == 45 and i > 11) or index > 45:
			val = k3[b]
			tmp.append(val)
			print(green(to_hex(val)), end=' ')
		elif b in known:
			val = known[b]
			tmp.append(val)
			print(green(to_hex(val)), end=' ')
		else:
			val = b
			tmp.append(None) #!WARNING
			print(red(to_hex(val)), end=' ')
			brute_counter.add(b)
	res.append(tmp)

	brute_counter = len(set(brute_counter))
	if brute_counter == 0:
		h1 = sha256(bytes(tmp)).hexdigest()
		h2 = hashes_bytes[index].hex()
			
		print(' ', h1 == h2)
		if h1 != h2:
			print('==' * 30)
	elif brute_counter <= 4:
		print('  !!!!! ', green(str(brute_counter)))
	elif brute_counter == 5:
		print(' ', yellow(str(brute_counter)))
	else:
		print(' ', red(str(brute_counter)))


print()
print()

print(single_hashes[selected])
print()

unk = [
	'blockIdx.x',
	'blockIdx.y',
	'blockIdx.z',
	'threadIdx.x',
]
mapper = {}
mapped = {}
for j, el in enumerate(blocks[selected]):
	if (j&1):
		print(f'key[{j}] = {hex(k3[el])};')
	elif el in known:
		print(f'key[{j}] = {hex(known[el])};')
	else:
		if el not in mapper:
			mapper[el] = unk.pop()
		print(f'key[{j}] = {mapper[el]};')
		mapped[el] = j



print()
for y, x in sorted(mapped.items()):
	print(f'0x{to_hex(y)}, key[{x}],', end=' ')
print()



try:
	h1 = sha256(bytes(res[selected])).hexdigest()
	h2 = hashes_bytes[selected].hex()
	print(h1 == h2)
	print(h1)
	print(h2)
except:
	pass


code = b''
for r in res:
	code += bytes(r)

from pwn import disasm

# print(disasm(code, arch='arm'))

r = []
for d in data[16*110:]:
	r.append(k3[d])
res.append(bytes(r))

with open('decoded2', 'wb') as f:
	for r in res:
		f.write(bytes(r))
	

# b = res[14]
# for i in range(256):
# 	b[12] = i
# 	h1 = sha256(bytes(b)).hexdigest()
# 	h2 = hashes_bytes[14].hex()
# 	print(h1 == h2)
# 	if h1 == h2:
# 		print(hex(i))
# 		break


